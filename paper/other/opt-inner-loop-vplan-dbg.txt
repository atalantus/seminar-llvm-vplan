./opt -S -passes='loop-vectorize' -mcpu=znver4 -debug-only=loop-vectorize -force-vector-interleave=1 -force-vector-width=4 -vplan-print-in-dot-format slm.ll -o slm-vec.ll



LV: Checking a loop in 'inner_loop_conditional' from slm.ll
LV: Loop hints: force=? width=4 interleave=1
LV: Found a loop: for.body
LV: Found an induction variable.
LV: Found FP op with unsafe algebra.
LV: We can vectorize this loop (with a runtime bound check)!
LV: Loop does not require scalar epilogue
LV: Found trip count: 0
LV: Found maximum trip count: 2147483647
LV: The max safe fixed VF is: 67108864.
LV: The max safe scalable VF is: vscale x 0.



LV: Found uniform instruction:   %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
LV: Found uniform instruction:   %arrayidx = getelementptr inbounds i8, ptr %z, i64 %indvars.iv
LV: Found uniform instruction:   %arrayidx2 = getelementptr inbounds float, ptr %y, i64 %indvars.iv
LV: Found uniform instruction:   %arrayidx4 = getelementptr inbounds float, ptr %x, i64 %indvars.iv
LV: Found uniform instruction:   %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
LV: Found uniform instruction:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
LV: Found scalar instruction:   %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
LV: Found scalar instruction:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
LV: Found an estimated cost of 0 for VF 4 For instruction:   %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
LV: Found an estimated cost of 0 for VF 4 For instruction:   %arrayidx = getelementptr inbounds i8, ptr %z, i64 %indvars.iv
LV: Found an estimated cost of 1 for VF 4 For instruction:   %0 = load i8, ptr %arrayidx, align 1, !tbaa !2, !range !6, !noundef !7
LV: Found an estimated cost of 1 for VF 4 For instruction:   %tobool.not = icmp eq i8 %0, 0
LV: Found an estimated cost of 0 for VF 4 For instruction:   br i1 %tobool.not, label %for.inc, label %if.then
LV: Found an estimated cost of 0 for VF 4 For instruction:   %arrayidx2 = getelementptr inbounds float, ptr %y, i64 %indvars.iv
LV: Found an estimated cost of 1 for VF 4 For instruction:   %1 = load float, ptr %arrayidx2, align 4, !tbaa !8
LV: Found an estimated cost of 0 for VF 4 For instruction:   %arrayidx4 = getelementptr inbounds float, ptr %x, i64 %indvars.iv
LV: Found an estimated cost of 1 for VF 4 For instruction:   %2 = load float, ptr %arrayidx4, align 4, !tbaa !8
LV: Found an estimated cost of 1 for VF 4 For instruction:   %add = fadd float %1, %2
LV: Found an estimated cost of 1 for VF 4 For instruction:   store float %add, ptr %arrayidx4, align 4, !tbaa !8
LV: Found an estimated cost of 0 for VF 4 For instruction:   br label %for.inc
LV: Found an estimated cost of 1 for VF 4 For instruction:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
LV: Found an estimated cost of 1 for VF 4 For instruction:   %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
LV: Found an estimated cost of 0 for VF 4 For instruction:   br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body, !llvm.loop !10
LV: Using user VF 4.
LV: Loop does not require scalar epilogue
LV: Scalarizing:  %arrayidx = getelementptr inbounds i8, ptr %z, i64 %indvars.iv
LV: Scalarizing:  %arrayidx2 = getelementptr inbounds float, ptr %y, i64 %indvars.iv
LV: Scalarizing:  %arrayidx4 = getelementptr inbounds float, ptr %x, i64 %indvars.iv
LV: Scalarizing:  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
LV: Scalarizing:  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count



digraph VPlan {
graph [labelloc=t, fontsize=30; label="Vectorization Plan\nInitial VPlan for VF=\{4\},UF\>=1\nLive-in vp\<%0\> = VF * UF\nLive-in vp\<%1\> = vector-trip-count\nvp\<%2\> = original trip-count\n"]
node [shape=rect, fontname=Courier, fontsize=30]
edge [fontname=Courier, fontsize=30]
compound=true
  N0 [label =
    "ir-bb\<for.body.preheader\>:\l" +
    "  IR   %wide.trip.count = zext nneg i32 %N to i64\l" +
    "  EMIT vp\<%2\> = EXPAND SCEV (zext i32 %N to i64)\l" +
    "No successors\l"
  ]
  N1 [label =
    "vector.ph:\l" +
    "Successor(s): vector loop\l"
  ]
  N1 -> N2 [ label="" lhead=cluster_N3]
  subgraph cluster_N3 {
    fontname=Courier
    label="\<x1\> vector loop"
    N2 [label =
      "vector.body:\l" +
      "  EMIT vp\<%3\> = CANONICAL-INDUCTION ir\<0\>, vp\<%index.next\>\l" +
      "  vp\<%4\> = SCALAR-STEPS vp\<%3\>, ir\<1\>\l" +
      "  CLONE ir\<%arrayidx\> = getelementptr inbounds ir\<%z\>, vp\<%4\>\l" +
      "  vp\<%5\> = vector-pointer ir\<%arrayidx\>\l" +
      "  WIDEN ir\<%0\> = load vp\<%5\>\l" +
      "  WIDEN ir\<%tobool.not\> = icmp eq ir\<%0\>, ir\<0\>\l" +
      "  EMIT vp\<%6\> = not ir\<%tobool.not\>\l" +
      "  CLONE ir\<%arrayidx2\> = getelementptr ir\<%y\>, vp\<%4\>\l" +
      "  vp\<%7\> = vector-pointer ir\<%arrayidx2\>\l" +
      "  WIDEN ir\<%1\> = load vp\<%7\>, vp\<%6\>\l" +
      "  CLONE ir\<%arrayidx4\> = getelementptr ir\<%x\>, vp\<%4\>\l" +
      "  vp\<%8\> = vector-pointer ir\<%arrayidx4\>\l" +
      "  WIDEN ir\<%2\> = load vp\<%8\>, vp\<%6\>\l" +
      "  WIDEN ir\<%add\> = fadd ir\<%1\>, ir\<%2\>\l" +
      "  vp\<%9\> = vector-pointer ir\<%arrayidx4\>\l" +
      "  WIDEN store vp\<%9\>, ir\<%add\>, vp\<%6\>\l" +
      "  EMIT vp\<%index.next\> = add nuw vp\<%3\>, vp\<%0\>\l" +
      "  EMIT branch-on-count vp\<%index.next\>, vp\<%1\>\l" +
      "No successors\l"
    ]
  }
  N2 -> N4 [ label="" ltail=cluster_N3]
  N4 [label =
    "middle.block:\l" +
    "  EMIT vp\<%cmp.n\> = icmp eq vp\<%2\>, vp\<%1\>\l" +
    "  EMIT branch-on-cond vp\<%cmp.n\>\l" +
    "Successor(s): ir-bb\<for.cond.cleanup.loopexit\>, scalar.ph\l"
  ]
  N4 -> N5 [ label="T"]
  N4 -> N6 [ label="F"]
  N5 [label =
    "ir-bb\<for.cond.cleanup.loopexit\>:\l" +
    "No successors\l"
  ]
  N6 [label =
    "scalar.ph:\l" +
    "Successor(s): ir-bb\<for.body\>\l"
  ]
  N6 -> N7 [ label=""]
  N7 [label =
    "ir-bb\<for.body\>:\l" +
    "  IR   %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]\l" +
    "  IR   %arrayidx = getelementptr inbounds i8, ptr %z, i64 %indvars.iv\l" +
    "  IR   %0 = load i8, ptr %arrayidx, align 1, !tbaa !2, !range !6, !noundef !7\l" +
    "  IR   %tobool.not = icmp eq i8 %0, 0\l" +
    "No successors\l"
  ]
}



LV: Found an estimated cost of 0 for VF 4 For instruction:   %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
LV: Found an estimated cost of 0 for VF 4 For instruction:   %arrayidx = getelementptr inbounds i8, ptr %z, i64 %indvars.iv
LV: Found an estimated cost of 1 for VF 4 For instruction:   %0 = load i8, ptr %arrayidx, align 1, !tbaa !2, !range !6, !noundef !7
LV: Found an estimated cost of 1 for VF 4 For instruction:   %tobool.not = icmp eq i8 %0, 0
LV: Found an estimated cost of 0 for VF 4 For instruction:   br i1 %tobool.not, label %for.inc, label %if.then
LV: Found an estimated cost of 0 for VF 4 For instruction:   %arrayidx2 = getelementptr inbounds float, ptr %y, i64 %indvars.iv
LV: Found an estimated cost of 1 for VF 4 For instruction:   %1 = load float, ptr %arrayidx2, align 4, !tbaa !8
LV: Found an estimated cost of 0 for VF 4 For instruction:   %arrayidx4 = getelementptr inbounds float, ptr %x, i64 %indvars.iv
LV: Found an estimated cost of 1 for VF 4 For instruction:   %2 = load float, ptr %arrayidx4, align 4, !tbaa !8
LV: Found an estimated cost of 1 for VF 4 For instruction:   %add = fadd float %1, %2
LV: Found an estimated cost of 1 for VF 4 For instruction:   store float %add, ptr %arrayidx4, align 4, !tbaa !8
LV: Found an estimated cost of 0 for VF 4 For instruction:   br label %for.inc
LV: Found an estimated cost of 1 for VF 4 For instruction:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
LV: Found an estimated cost of 1 for VF 4 For instruction:   %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
LV: Found an estimated cost of 0 for VF 4 For instruction:   br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body, !llvm.loop !10
LV(REG): Calculating max register usage:
LV(REG): At #0 Interval # 0
LV(REG): At #1 Interval # 1
LV(REG): At #2 Interval # 2
LV(REG): At #3 Interval # 2
LV(REG): At #5 Interval # 1
LV(REG): At #6 Interval # 2
LV(REG): At #7 Interval # 2
LV(REG): At #8 Interval # 3
LV(REG): At #9 Interval # 4
LV(REG): At #12 Interval # 1
LV(REG): At #13 Interval # 1
LV(REG): VF = 4
LV(REG): Found max usage: 2 item
LV(REG): RegisterClass: Generic::ScalarRC, 2 registers
LV(REG): RegisterClass: Generic::VectorRC, 2 registers
LV(REG): Found invariant usage: 1 item
LV(REG): RegisterClass: Generic::ScalarRC, 1 registers
LV: The target has 16 registers of Generic::ScalarRC register class
LV: The target has 32 registers of Generic::VectorRC register class
LV: Loop does not require scalar epilogue
LV: Loop cost is 8
LV: IC is 4
LV: VF is 4
LV: Interleaving to saturate store or load ports.
Calculating cost of runtime checks:
  1  for   %0 = shl nuw nsw i64 %wide.trip.count, 2
  0  for   %scevgep = getelementptr i8, ptr %x, i64 %0
  0  for   %scevgep1 = getelementptr i8, ptr %z, i64 %wide.trip.count
  0  for   %scevgep2 = getelementptr i8, ptr %y, i64 %0
  1  for   %bound0 = icmp ult ptr %x, %scevgep1
  1  for   %bound1 = icmp ult ptr %z, %scevgep
  1  for   %found.conflict = and i1 %bound0, %bound1
  1  for   %bound03 = icmp ult ptr %x, %scevgep2
  1  for   %bound14 = icmp ult ptr %y, %scevgep
  1  for   %found.conflict5 = and i1 %bound03, %bound14
  1  for   %conflict.rdx = or i1 %found.conflict, %found.conflict5
Total cost of runtime checks: 8
LV: Interleaving is beneficial but is explicitly disabled.LV: Found a vectorizable loop (4) in slm.ll
LEV: Epilogue vectorization is not profitable for this loop



Executing best plan with VF=4, UF=1
VPlan 'Final VPlan for VF={4},UF={1}' {
Live-in vp<%0> = VF * UF
Live-in vp<%1> = vector-trip-count
vp<%2> = original trip-count

ir-bb<for.body.preheader>:
  IR   %wide.trip.count = zext nneg i32 %N to i64
  EMIT vp<%2> = EXPAND SCEV (zext i32 %N to i64)
No successors

vector.ph:
Successor(s): vector loop

<x1> vector loop: {
  vector.body:
    EMIT vp<%3> = CANONICAL-INDUCTION ir<0>, vp<%index.next>
    vp<%4> = SCALAR-STEPS vp<%3>, ir<1>
    CLONE ir<%arrayidx> = getelementptr inbounds ir<%z>, vp<%4>
    vp<%5> = vector-pointer ir<%arrayidx>
    WIDEN ir<%1> = load vp<%5>
    WIDEN ir<%tobool.not> = icmp eq ir<%1>, ir<0>
    EMIT vp<%6> = not ir<%tobool.not>
    CLONE ir<%arrayidx2> = getelementptr ir<%y>, vp<%4>
    vp<%7> = vector-pointer ir<%arrayidx2>
    WIDEN ir<%2> = load vp<%7>, vp<%6>
    CLONE ir<%arrayidx4> = getelementptr ir<%x>, vp<%4>
    vp<%8> = vector-pointer ir<%arrayidx4>
    WIDEN ir<%3> = load vp<%8>, vp<%6>
    WIDEN ir<%add> = fadd ir<%2>, ir<%3>
    vp<%9> = vector-pointer ir<%arrayidx4>
    WIDEN store vp<%9>, ir<%add>, vp<%6>
    EMIT vp<%index.next> = add nuw vp<%3>, vp<%0>
    EMIT branch-on-count vp<%index.next>, vp<%1>
  No successors
}
Successor(s): middle.block

middle.block:
  EMIT vp<%cmp.n> = icmp eq vp<%2>, vp<%1>
  EMIT branch-on-cond vp<%cmp.n>
Successor(s): ir-bb<for.cond.cleanup.loopexit>, scalar.ph

ir-bb<for.cond.cleanup.loopexit>:
No successors

scalar.ph:
Successor(s): ir-bb<for.body>

ir-bb<for.body>:
  IR   %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  IR   %arrayidx = getelementptr inbounds i8, ptr %z, i64 %indvars.iv
  IR   %1 = load i8, ptr %arrayidx, align 1, !tbaa !2, !range !6, !noundef !7
  IR   %tobool.not = icmp eq i8 %1, 0
No successors
}



LV: vectorizing VPBB:ir-bb<for.body.preheader> in BB:for.body.preheader
LV: filled BB:
for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext nneg i32 %N to i64
  br label %for.body
LV: Loop does not require scalar epilogue
LV: Loop does not require scalar epilogue
LV: vectorizing VPBB:vector.ph in BB:vector.ph
LV: filled BB:
vector.ph:                                        ; preds = %vector.memcheck
  %n.mod.vf = urem i64 %wide.trip.count, 4
  %n.vec = sub i64 %wide.trip.count, %n.mod.vf
  br
LV: VPBlock in RPO vector.body
LV: created vector.body
LV: draw edge fromvector.ph
LV: vectorizing VPBB:vector.body in BB:vector.body
LV: filled BB:
vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ]
  %1 = add i64 %index, 0
  %2 = getelementptr inbounds i8, ptr %z, i64 %1
  %3 = getelementptr inbounds i8, ptr %2, i32 0
  %wide.load = load <4 x i8>, ptr %3, align 1, !tbaa !2, !alias.scope !6
  %4 = icmp eq <4 x i8> %wide.load, zeroinitializer
  %5 = xor <4 x i1> %4, splat (i1 true)
  %6 = getelementptr float, ptr %y, i64 %1
  %7 = getelementptr float, ptr %6, i32 0
  %wide.masked.load = call <4 x float> @llvm.masked.load.v4f32.p0(ptr %7, i32 4, <4 x i1> %5, <4 x float> poison), !tbaa !9, !alias.scope !11
  %8 = getelementptr float, ptr %x, i64 %1
  %9 = getelementptr float, ptr %8, i32 0
  %wide.masked.load6 = call <4 x float> @llvm.masked.load.v4f32.p0(ptr %9, i32 4, <4 x i1> %5, <4 x float> poison), !tbaa !9, !alias.scope !13, !noalias !15
  %10 = fadd <4 x float> %wide.masked.load, %wide.masked.load6
  %11 = getelementptr float, ptr %8, i32 0
  call void @llvm.masked.store.v4f32.p0(<4 x float> %10, ptr %11, i32 4, <4 x i1> %5), !tbaa !9, !alias.scope !13, !noalias !15
  %index.next = add nuw i64 %index, 4
  %12 = icmp eq i64 %index.next, %n.vec
  br i1 %12, <null operand!>, label %vector.body
LV: vectorizing VPBB:ir-bb<middle.block> in BB:middle.block
LV: filled BB:
middle.block:                                     ; No predecessors!
  %cmp.n = icmp eq i64 %wide.trip.count, %n.vec
  br i1 %cmp.n, <null operand!>, <null operand!>
LV: draw edge fromvector.body
LV: vectorizing VPBB:ir-bb<for.cond.cleanup.loopexit> in BB:for.cond.cleanup.loopexit
LV: filled BB:
for.cond.cleanup.loopexit:                        ; preds = %for.inc
  br label %for.cond.cleanup
LV: draw edge frommiddle.block
LV: vectorizing VPBB:ir-bb<scalar.ph> in BB:scalar.ph
LV: filled BB:
scalar.ph:                                        ; preds = %vector.memcheck, %for.body.preheader
  %bc.resume.val = phi i64 [ %n.vec, %middle.block ], [ 0, %for.body.preheader ], [ 0, %vector.memcheck ]
  br label %for.body
LV: draw edge frommiddle.block
LV: vectorizing VPBB:ir-bb<for.body> in BB:for.body
LV: filled BB:
for.body:                                         ; preds = %for.inc, %scalar.ph
  %indvars.iv = phi i64 [ %bc.resume.val, %scalar.ph ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i8, ptr %z, i64 %indvars.iv
  %13 = load i8, ptr %arrayidx, align 1, !tbaa !2, !range !16, !noundef !17
  %tobool.not = icmp eq i8 %13, 0
  br i1 %tobool.not, label %for.inc, label %if.then
LV: draw edge fromscalar.ph



LV: Interleaving disabled by the pass manager
LV: Loop does not require scalar epilogue
LV: Vectorizing: innermost loop.